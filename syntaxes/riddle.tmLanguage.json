{
  "name": "Riddle",
  "scopeName": "source.riddle",
  "fileTypes": ["rid"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.riddle",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.double-slash.riddle",
          "match": "//.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.riddle",
          "match": "\"(?:\\\\.|[^\\\\\"])*\""
        },
        {
          "name": "string.quoted.single.riddle",
          "match": "'(?:\\\\.|[^\\\\'])*'"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.hex.riddle",
          "match": "\\b0x[0-9A-Fa-f]+\\b"
        },
        {
          "name": "constant.numeric.integer.octal.riddle",
          "match": "\\b0[0-7]+\\b"
        },
        {
          "name": "constant.numeric.integer.binary.riddle",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.float.riddle",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.riddle",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.riddle",
          "match": "\\b(?:for|while|if|else|return|break|continue|try|catch)\\b"
        },
        {
          "name": "storage.modifier.riddle",
          "match": "\\b(?:static|override|extern|const|public|protected|private|virtual)\\b"
        },
        {
          "name": "storage.type.riddle",
          "match": "\\b(?:var|val|fun|import|package|class|enum|union)\\b"
        },
        {
          "name": "constant.language.riddle",
          "match": "\\b(?:true|false|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.riddle",
          "match": "(?:\\+\\+?|--?|==|!=|<=|>=|<<=|>>=|<<|>>|&&|\\|\\||[+\\-*/%&|^~<>!=])"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.riddle",
          "match": "[;:,\\.\\(\\)\\{\\}\\[\\]]"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.riddle",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
        }
      ]
    }
  }
}
