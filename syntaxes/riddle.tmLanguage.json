{
	"name": "Riddle",
	"scopeName": "source.riddle",
	"fileTypes": [
		".rid"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "//.*$"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\[\\\\\"ntr]"
						}
					]
				},
				{
					"name": "constant.character",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\[\\\\'ntr]"
						}
					]
				},
				{
					"name": "constant.numeric.float",
					"match": "\\b\\d+\\.\\d+"
				},
				{
					"name": "constant.numeric.hex",
					"match": "0x[0-9A-F]+"
				},
				{
					"name": "constant.numeric.octal",
					"match": "0[0-7]+"
				},
				{
					"name": "constant.numeric.binary",
					"match": "0b[01]+"
				},
				{
					"name": "constant.numeric.integer",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.language.boolean",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(var|val|for|while|if|else|return|import|package|class|true|false|null|try|catch|break|continue)\\b"
				},
				{
					"name": "storage.modifier",
					"match": "\\b(override|static|const|public|protected|private|extern|virtual|operator)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "=>|->|::|\\+=|-=|\\*=|/=|%=|<<=|>>=|&=|\\|=|\\^=|==|!=|<=|>=|&&|\\|\\||\\+\\+|--|<<|>>|[\\.:;,<>!~+\\-*/%&|^]"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.section.parens.begin",
					"match": "\\("
				},
				{
					"name": "punctuation.section.parens.end",
					"match": "\\)"
				},
				{
					"name": "punctuation.section.brackets.begin",
					"match": "\\["
				},
				{
					"name": "punctuation.section.brackets.end",
					"match": "\\]"
				},
				{
					"name": "punctuation.section.braces.begin",
					"match": "\\{"
				},
				{
					"name": "punctuation.section.braces.end",
					"match": "\\}"
				},
				{
					"name": "punctuation.terminator",
					"match": ";"
				},
				{
					"name": "punctuation.separator",
					"match": ","
				},
				{
					"name": "punctuation.accessor",
					"match": "\\."
				},
				{
					"name": "punctuation.decorator",
					"match": "@"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"name": "meta.function",
					"begin": "\\b(fun)\\b\\s*",
					"end": "(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.function"
						}
					},
					"patterns": [
						{
							"name": "entity.name.function",
							"match": "\\b\\w+\\b"
						},
						{
							"include": "#modifiers"
						}
					]
				},
				{
					"name": "meta.class",
					"begin": "\\bclass\\b\\s*",
					"end": "(?=\\{)",
					"patterns": [
						{
							"name": "entity.name.class",
							"match": "\\b\\w+\\b"
						},
						{
							"include": "#modifiers"
						}
					]
				},
				{
					"name": "meta.variable.declaration",
					"match": "(var|val)\\s+\\w+",
					"captures": {
						"1": {
							"name": "storage.type.variable"
						},
						"2": {
							"name": "variable.other"
						}
					}
				}
			]
		},
		"annotations": {
			"name": "meta.annotation",
			"begin": "@\\s*\\w+\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.decorator"
				}
			},
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.other",
					"match": "\\b\\w+\\b"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#punctuation"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "meta.function.call",
					"begin": "\\b\\w+\\s*\\(",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "entity.name.function"
						}
					}
				}
			]
		},
		"modifiers": {
			"patterns": [
				{
					"name": "storage.modifier",
					"match": "\\b(public|private|protected|static|override|extern)\\b"
				}
			]
		}
	}
}